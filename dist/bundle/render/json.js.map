{
  "version": 3,
  "sources": ["../../../../slotted-element/fetch-element.js", "../../../../slotted-element/render/json.js"],
  "sourcesContent": ["    export function\nwait4DomUpdated( cb )\n{\n    return new Promise( resolve =>\n    {\n        const assureDom = window.requestIdleCallback || window.requestAnimationFrame\n            , done      = () => resolve( cb && cb() );\n        assureDom ? assureDom( done ) : setTimeout( done, 100 );\n    } )\n}\n\n    export function\ntoKebbabCase( s )\n{ return ( s || '' ).toLowerCase().replaceAll( /\\s/g, '-' )}\n\n    export class\nFetchElement extends HTMLElement\n{\n    static get observedAttributes(){ return  [ 'src', 'method', 'headers', 'state', 'status', 'error', 'skiprender' ]; }\n\n    static get mime2mod(){ return   {   'application/json':async ()=>(await import('./render/json.js')).default\n                                    ,   'text/html': ()=>FetchElement.prototype.renderHtml\n                                    ,   'text/xml': ()=>FetchElement.prototype.renderHtml\n                                    ,   'application/xml': ()=>FetchElement.prototype.renderHtml\n                                    ,   'image/svg+xml': ()=>FetchElement.prototype.renderHtml\n                                    }}\n\n    get headers(){ return {} }\n\n    abort(){}\n\n    fetch(...args){ return this._fetch(...args); }\n\n    constructor()\n    {\n        super();\n        let promise = Promise.resolve();\n        const controller = new AbortController();\n        const { signal } = controller;\n\n        this.abort = () => controller.abort();\n        this._fetch = async( url, options ) =>\n        {\n            this.state = 'loading';\n            this.status = '';\n\n            const opt = {\n                method: this.getAttribute( 'method' ) || 'GET'\n                , headers: this.headers\n                , ...options\n                , signal\n            };\n\n            return promise = new Promise( async( resolve, reject ) =>\n            {\n                try\n                {   const response = await fetch( url, opt );\n                    const ret = await this.onResponse( response )\n                    const res = await this.onResult( ret );\n                    this.error ? reject( this.error ) : resolve( res );\n                }catch( ex )\n                { reject( this.onError( ex ) ); }\n            } )\n        };\n        Object.defineProperty( this, 'promise', { get(){ return promise; } } );\n        FetchElement.observedAttributes\n            .filter( prop => prop !== 'headers' )\n            .forEach( prop => Object.defineProperty( this, prop,\n                {\n                    get: () => this.getAttribute( prop )\n                    , set: val => this.setAttribute( prop, val )\n                } ) );\n    }\n\n    connectedCallback()\n    {\n        this.src && this.fetch( this.src );\n        this.initialized = !0;\n    }\n\n    attributeChangedCallback( name, oldValue, newValue )\n    {\n        switch( name )\n        {   case 'headers':\n                this[ name ] = eval( newValue );\n                break;\n            case 'src':\n                this.initialized && this.fetch( newValue );\n                break;\n            default:\n                if( this[ name ] !== newValue )\n                    this[ name ] = newValue;\n        }\n    }\n\n    async onResponse( response )\n    {\n        const s = 1 * ( this.status = response.status );\n        if( s < 200 || s >= 300 )\n            this.error = 'network error';\n        this.contentType = response.headers.get( 'content-type' );\n        this.responseHeaders = response.headers;\n        if( this.contentType.includes( 'json' ) )\n            return response.json();\n        return response.text();\n    }\n\n    setContent( html ){ this.innerHTML = html; }\n    \n    async onResult( result )\n    {\n        try\n        {   if( this.hasAttribute('skiprender') )\n                return;\n\n            let mod = await this.constructor.mime2mod[ this.contentType.split(';')[0] ]();\n            if( typeof mod === 'string' )\n                mod = (await import(mod)).default;\n\n            this.state = 'rendering';\n\n            return ( mod || this.render ).call( this, result, this.contentType, this.status, this.responseHeaders  );\n        }finally\n        {\n            this.state = 'loaded';\n        }\n    }\n\n    render( data, contentType, httpCode, responseHeaders ){}\n    async renderHtml( data, contentType, httpCode, responseHeaders )\n    {\n        this.setContent( data );\n        await wait4DomUpdated();\n        this.render( ...arguments );\n        await wait4DomUpdated();\n    }\n\n    onError( error )\n    {\n        this.state = 'error';\n        return error;\n    }\n\n    getKeys( obj ){ return Object.keys( obj ); }\n}\n\nexport default FetchElement;\n\nwindow.customElements.define( 'fetch-element', FetchElement );\n", "import { toKebbabCase, wait4DomUpdated } from '../fetch-element.js';\n\nexport default async function render( data, contentType, status, responseHeaders )\n{\n    await wait4DomUpdated();\n    const html = this.render( data, contentType, status, responseHeaders );\n    if( !this.json2table )\n        this.json2table = json2table;\n    this.setContent( html || this.json2table( data, [] ) );\n    await wait4DomUpdated();\n}\nexport function json2table( data, path )\n{\n    if( Array.isArray( data ) )\n    {\n        if( !data.length )\n            return '';\n        const keys = this.getKeys( data[ 0 ] );\n\n        return `\n<table>\n    <tr>${ keys.map( k => `<th>${ k }</th>` ).join( '\\n' ) }</tr>\n    ${ data.map( ( r, i ) => `\n    <tr>${ keys.map( k => `\n        <td key=\"${ toKebbabCase( k ) }\">\n            ${ this.json2table( r[ k ], [ ...path, i, k ] ) }\n        </td>` ).join( '' )\n        }\n    </tr>` ).join( '\\n' ) }\n</table>\n`\n    }\n    if( typeof data !== 'object' || data === null )\n        return data;\n    const keys = this.getKeys( data );\n    return `\n<table>\n    ${ keys.map( k => `\n<tr><th>${ k }</th>\n    <td key=\"${ toKebbabCase( k ) }\">${ this.json2table( data[ k ], [ ...path, k ] ) }</td>\n</tr>` ).join( '' ) }\n</table>\n`\n}\n"],
  "mappings": "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",
  "names": []
}
